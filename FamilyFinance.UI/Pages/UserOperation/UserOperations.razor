@page "/uo"
@inject IUserOperationsService<UserOperationModel> UserOperationService
@inject NavigationManager NavigationManager
@attribute [Authorize]


@if (ListUO == null)
{
    <h3 class="mb-5">List Of Operations</h3>
    <AuthorizeView>
        <Authorized>
            <button class="btn btn-success mb-2" @onclick="(()=>Create())">Add New Operation</button>
        </Authorized>
    </AuthorizeView>

    <div style="vertical-align:middle; text-align:center">
        <img src="img/no-record.png" width="520" />
    </div>
}
else if (ListUO.Count == 0)
{
    <DisplaySpinner />
}
else
{

    <h3 class="mb-5">List Of Operations</h3>
    <AuthorizeView>
        <Authorized>
            <button class="btn btn-success mb-2" @onclick="(()=>Create())">Add New Operation</button>
        </Authorized>
    </AuthorizeView>


    <div class="table-responsive mt-2">
        <table class="table table-striped">
            <thead class="thead-light">
                <tr>
                    <th>№</th>
                    <th>Date</th>
                    <th>Budget Item</th>
                    <th>Sum of operation</th>
                    <th>Financial operation</th>
                    <th>Sum of financial operation</th>
                    <th></th>
                </tr>
            </thead>

            <tbody>
                @foreach (var uo in uoModel)
                {
                    <tr>
                        <td>@id</td>
                        <td>@uo.Date.ToShortDateString()</td>
                        <td>
                            @if (@uo.BudgetItem != null)
                            {
                                @uo.BudgetItem.Item
                            }
                            else
                            {
                                @string.Empty
                            }                               
                        </td>

                        <td>
                            @if (@uo.BudgetItem != null)
                            {
                                <span>@string.Format("{0:N0}",uo.SumBudgetItem) ₴ </span>
                            }
                            else
                            {
                                @string.Empty
                            }
                        </td>

                        <td>
                            @if (@uo.FinOperation != null)
                            {
                                @uo.FinOperation.FinOperation
                            }
                            else
                            {
                                @string.Empty
                            }
                        </td>

                        <td>
                            @if (@uo.FinOperation != null)
                            {
                                <span>@string.Format("{0:N0}",uo.SumFinOperation) ₴ </span>
                            }
                            else
                            {
                                @string.Empty
                            }
                        </td>

                            <AuthorizeView>
                                <Authorized>
                                    <td><buttom class="btn btn-primary" @onclick="(() => ShowBI((int)uo.Id))"><i class="oi oi-pencil"></i></buttom></td>
                                </Authorized>
                            </AuthorizeView>

                        </tr>
                    id++;
                }

            </tbody>

            <tfoot>
                <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                        PageIndex="@pageIndex"
                        Radius="3"
                        OnSelectedPage="@SelectedPage">
                </Pagination>
            </tfoot>

        </table>

    </div>

}



@code {
    private List<UserOperationModel> ListUO = new();
    private List<UserOperationModel> uoModel = new();

    int id = 1;
    private int itemsPerPage = 10;
    private int totalPages;
    private int pageIndex = 1;

    private int totalPageQuantity;
    private int currentPage = 1;
    private string nameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await UserOperationService.GetListOfEntities();
        ListUO = UserOperationService.ListOfEntities;

        if (ListUO.Count == 0)
            ListUO = null;

        if (ListUO != null)
        {
            decimal temp = Math.Ceiling((decimal)ListUO.Count / itemsPerPage);
            totalPages = (int)temp;

            var skipCount = itemsPerPage * (pageIndex - 1);
            uoModel = ListUO.Skip(skipCount).Take(itemsPerPage).ToList();
        }

    }

    private void SelectedPage(int selectedPageIndex)
    {
        if (ListUO != null)
        {
            pageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (pageIndex - 1);
            uoModel = ListUO.Skip(skipCount).Take(itemsPerPage).ToList();
        }
    }

    void ShowBI(int id)
    {
        NavigationManager.NavigateTo($"/UserOperation/{id}");
    }

    void Create()
    {
        NavigationManager.NavigateTo($"/UserOperation");
    }
}
