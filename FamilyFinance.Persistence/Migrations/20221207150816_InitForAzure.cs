using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FamilyFinance.Persistence.Migrations
{
    /// <inheritdoc />
    public partial class InitForAzure : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 37, 14, 215, 175, 15, 20, 124, 179, 242, 171, 29, 249, 17, 124, 131, 31, 91, 138, 166, 33, 72, 124, 188, 238, 235, 150, 148, 216, 86, 146, 216, 26, 139, 59, 30, 150, 6, 134, 93, 237, 36, 99, 151, 203, 46, 156, 212, 100, 203, 241, 31, 151, 161, 190, 201, 208, 50, 127, 112, 59, 239, 46, 77, 68 }, new byte[] { 30, 146, 6, 56, 145, 254, 37, 161, 200, 173, 96, 198, 107, 156, 73, 166, 185, 140, 164, 96, 147, 50, 180, 96, 105, 88, 75, 100, 167, 173, 40, 147, 220, 154, 135, 188, 238, 239, 188, 4, 244, 49, 34, 72, 254, 151, 248, 43, 31, 16, 44, 60, 12, 116, 77, 122, 141, 207, 110, 135, 193, 61, 155, 216, 109, 103, 102, 12, 196, 172, 0, 34, 145, 117, 176, 35, 116, 64, 180, 236, 7, 77, 89, 137, 34, 10, 43, 153, 185, 106, 60, 105, 29, 28, 108, 11, 125, 126, 21, 77, 159, 29, 194, 112, 24, 225, 27, 119, 177, 218, 146, 103, 136, 149, 125, 227, 141, 137, 243, 75, 136, 64, 178, 62, 50, 63, 18, 238 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 2,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 3, 164, 22, 106, 226, 245, 198, 10, 118, 160, 127, 121, 250, 205, 64, 226, 224, 78, 37, 247, 42, 109, 135, 93, 18, 91, 218, 234, 150, 60, 192, 56, 169, 153, 170, 252, 189, 144, 4, 18, 205, 189, 196, 89, 75, 193, 86, 126, 49, 51, 103, 78, 81, 59, 197, 42, 158, 54, 156, 217, 74, 45, 196, 16 }, new byte[] { 30, 146, 6, 56, 145, 254, 37, 161, 200, 173, 96, 198, 107, 156, 73, 166, 185, 140, 164, 96, 147, 50, 180, 96, 105, 88, 75, 100, 167, 173, 40, 147, 220, 154, 135, 188, 238, 239, 188, 4, 244, 49, 34, 72, 254, 151, 248, 43, 31, 16, 44, 60, 12, 116, 77, 122, 141, 207, 110, 135, 193, 61, 155, 216, 109, 103, 102, 12, 196, 172, 0, 34, 145, 117, 176, 35, 116, 64, 180, 236, 7, 77, 89, 137, 34, 10, 43, 153, 185, 106, 60, 105, 29, 28, 108, 11, 125, 126, 21, 77, 159, 29, 194, 112, 24, 225, 27, 119, 177, 218, 146, 103, 136, 149, 125, 227, 141, 137, 243, 75, 136, 64, 178, 62, 50, 63, 18, 238 } });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 181, 197, 157, 35, 54, 147, 235, 37, 79, 30, 177, 87, 33, 51, 31, 223, 124, 185, 195, 167, 232, 202, 153, 152, 234, 63, 19, 47, 133, 216, 34, 65, 236, 48, 227, 140, 99, 199, 39, 230, 204, 64, 108, 48, 33, 123, 7, 208, 142, 195, 230, 80, 209, 200, 225, 15, 146, 10, 111, 12, 42, 144, 62, 65 }, new byte[] { 54, 233, 250, 249, 178, 156, 111, 210, 247, 193, 25, 81, 239, 36, 104, 88, 69, 76, 93, 242, 17, 205, 6, 178, 217, 191, 49, 15, 177, 29, 20, 56, 197, 134, 69, 29, 159, 0, 230, 192, 120, 234, 214, 51, 125, 195, 87, 140, 59, 108, 173, 81, 207, 247, 57, 77, 192, 48, 199, 199, 24, 244, 74, 187, 230, 248, 142, 246, 89, 49, 144, 45, 244, 223, 129, 36, 113, 234, 19, 202, 148, 161, 76, 126, 173, 240, 248, 78, 48, 143, 71, 78, 234, 18, 228, 165, 148, 134, 64, 76, 112, 210, 167, 34, 70, 152, 131, 115, 183, 212, 126, 144, 160, 54, 182, 247, 112, 212, 148, 115, 144, 154, 243, 106, 232, 118, 16, 250 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 2,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 65, 83, 178, 29, 3, 167, 215, 69, 70, 168, 162, 200, 44, 160, 104, 216, 211, 247, 159, 97, 138, 119, 101, 226, 95, 87, 201, 112, 105, 95, 11, 136, 41, 181, 194, 248, 244, 227, 5, 227, 152, 81, 115, 19, 140, 10, 129, 227, 157, 27, 163, 163, 214, 194, 193, 231, 158, 6, 1, 139, 106, 88, 135, 121 }, new byte[] { 54, 233, 250, 249, 178, 156, 111, 210, 247, 193, 25, 81, 239, 36, 104, 88, 69, 76, 93, 242, 17, 205, 6, 178, 217, 191, 49, 15, 177, 29, 20, 56, 197, 134, 69, 29, 159, 0, 230, 192, 120, 234, 214, 51, 125, 195, 87, 140, 59, 108, 173, 81, 207, 247, 57, 77, 192, 48, 199, 199, 24, 244, 74, 187, 230, 248, 142, 246, 89, 49, 144, 45, 244, 223, 129, 36, 113, 234, 19, 202, 148, 161, 76, 126, 173, 240, 248, 78, 48, 143, 71, 78, 234, 18, 228, 165, 148, 134, 64, 76, 112, 210, 167, 34, 70, 152, 131, 115, 183, 212, 126, 144, 160, 54, 182, 247, 112, 212, 148, 115, 144, 154, 243, 106, 232, 118, 16, 250 } });
        }
    }
}
